#include <iostream>
#include <string.h>
using namespace std;
class BST{
    string word;
    string meaning;
    BST *left, *right;

public:
    BST(){
        word = "";
        meaning = "";
        left = right = NULL;
    }
    BST(string w, string m){
        word = w;
        meaning = m;
        left = right = NULL;
    }
    BST *insert(BST *root, string w, string m){
        if (root == NULL){
            return new BST(w, m);
        }
        if (w > root->word){
            root->right = insert(root->right, w, m);
        }
        else if (w < root->word){
            root->left = insert(root->left, w, m);
        }
        return root;
    }
    void ascorder(BST *root){
        if (root != NULL){
            ascorder(root->left);
            cout << root->word << " - " << root->meaning << endl;
            ascorder(root->right);
        }
    }
    void descorder(BST *root){
        if (root != NULL){
            descorder(root->right);
            cout << root->word << " - " << root->meaning << endl;
            descorder(root->left);
        }
    }
    int search(BST *root, string key){
        int c = 0;
        while (root != NULL){
            c++;
            if (root->word == key){
                cout << "\n Word found with comparisons: " << c;
                return 1;
            }
            if (key > root->word)
                root = root->right;
            if (key < root->word)
                root = root->left;
        }
        return -1;
    }
    void update(BST *root, string key){
        while (root != NULL){
            if (root->word == key){
                cout << "Enter new meaning of the word " << root->word
                     << endl;
                cin >> root->meaning;
                return;
            }
            else if (key > root->word)
                root = root->right;
            else
                root = root->left;
        }
        cout << "\nWord not found";
    }
    BST *delet(BST *root, string w){
        BST *temp;
        if (root == NULL)
            return root;
        if (w < root->word){
            root->left = delet(root->left, w);
            return root;
        }
        else if (w > root->word){
            root->right = delet(root->right, w);
            return root;
        }
        // We reach here when root is the node to be deleted.
        // if both children do not exist
        if (root->right == NULL && root->left == NULL){
            delete root;
            cout << "Deleted..";
            return NULL;
        }
        // If one of the children is empty
        else if (root->left == NULL){
            temp = root->right;
            delete root;
            cout << "Deleted..";
            return temp;
        }
        else if (root->right == NULL){
            temp = root->left;
            delete root;
            cout << "Deleted..";
            return temp;
        }
        // If both children exist
        else{
            BST *succParent = root;
            // Find successor
            BST *succ = root->right;
            while (succ->left != NULL){
                succParent = succ;
                succ = succ->left;
            }
            if (succParent != root)
                succParent->left = succ->right;
            else
                succParent->right = succ->right;
            // Copy Successor Data to root
            root->word = succ->word;
            root->meaning = succ->meaning;
            // Delete Successor and return root
            delete succ;
            cout << "Deleted..";
            return root;
        }
    }
};
int main(){
    BST b, *root = NULL;
    int ch, n, count = 0;
    string word, meaning, key;
    while (1){
        cout<<"\n----MENU----\n 1) Create BST \n 2) Comparisons \n 3) Delete \n 4) Update \n 5) Ascending Order \n 6) Descending Order \n 7) Exit"<<endl; 
        cout<<"\n Enter your choice: ";
        cin >> ch;
        switch (ch){
        case 1:
            cout << "Enter number of elements in the BST : ";
            cin >> n;
            for (int i = 0; i < n; i++){
                cout << "Enter word: ";
                cin >> word;
                cout << "Enter meaning: ";
                cin >> meaning;
                root = b.insert(root, word, meaning);
            }
            break;
        case 2:
            cout << "Enter word to search: ";
            cin >> word;
            if (b.search(root, word) == 1)
                cout << "\nKeyword Found";
            else
                cout << "\nKeyword Not Found";
            break;
        case 3:
            cout << "Enter word to delete: ";
            cin >> key;
            b.delet(root, key);
            break;
        case 4:
            cout << "Enter word to update: ";
            cin >> key;
            b.update(root, key);
            break;
        case 5:
            cout << "Ascending Order: " << endl;
            b.ascorder(root);
            break;
        case 6:
            cout << "Descending Order: " << endl;
            b.descorder(root);
            break;
        case 7:
            exit(0);
        }
    }
    return 0;
}