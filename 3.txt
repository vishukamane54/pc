#include<iostream>
using namespace std;
class bst{
int data;
bst *left,*right;
public:
bst()
{
data=0;
left=right=NULL;
}
bst(int value)
{
data=value;
left=right=NULL;
}
bst* insert(bst*,int);
void inorder(bst*);
bst* search(bst*,int);
void minvalue(bst*);
void mirror(bst*);
int height(bst*);
};
bst* bst::insert(bst* root,int value)
{
if(!root){
return new bst(value);
}
if(value>root->data){
root->right=insert(root->right,value);
}
else if(value<root->data){
root->left=insert(root->left,value);
}
return root;
}
void bst::inorder(bst* root)
{
if(!root){
return;
}
inorder(root->left);
cout<<root->data<<" ";
inorder(root->right);
}
bst* bst::search(bst* root,int key)
{
if(root==NULL || root->data==key)
return root;
if(root->data<key)
return search(root->right,key);
return search(root->left,key);
}
void bst::minvalue(bst *root)
{
while(root->left != NULL)
{
root=root->left;
}
cout<<"\nMinimum value: "<<root->data<<endl;
}
void bst::mirror(bst *root)
{
bst*temp=NULL;
temp=root;
if(root!=NULL){
mirror(root->left);
mirror(root->right);
temp=root->left;
root->left=root->right;
root->right=temp;
}
}
int bst::height(bst *root)
{
if(root == NULL){
return 0;
}
return (max((height(root->left)),(height(root->right)))+1);
int main()
{
bst b,*root=NULL;
int ch,n,key,value;
while(1)
{
cout<<"\n---MENU___\n1.create BST\n2.Insert new node\n3.No. of nodes in the longest 
lenght\n4.Minimum value\n5.Mirror\n6.Search\n7.Display(Inorder)\n8.Exit\n\nEnter the choice:";
cin>>ch;
switch(ch)
{
case 1:cout<<"\nEnter no. of nodes in the BST:";
cin>>n;
for(int i=0;i<n;i++){
cout<<"Number= ";
cin>>value;
root=b.insert(root,value);
}
cout<<"\nInorder traversal: "<<endl;
b.inorder(root);
break;
case 2:cout<<"\nNumber= :";
cin>>value;
root=b.insert(root,value);
cout<<"\nInorder traversal: "<<endl;
b.inorder(root);
break;
case 3:cout<<"\nNumbers of nodes in the longest path: "<<b.height(root);
break;
case 4:b.minvalue(root);
break;
case 5: cout<<"\nInorder traversal: ";
b.inorder(root);
b.mirror(root);
cout<<"\nThe mirror of tree: ";
b.inorder(root);
break;
case 6: cout<<"\nEnter the key to search: ";
cin>>key;
if(b.search(root,key)!=NULL)
cout<<key<<" NOT FOUND"<<endl;
else
cout<<key<<" FOUND"<<endl;
break;
case 7:cout<<"\nInorder traversal: "<<endl;
b.inorder(root);
case 8:cout<<"\nThanks for using the program!";
exit(0);
}
}return 0;
}
