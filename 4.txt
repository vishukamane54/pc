#include <iostream>
using namespace std;
class Node{
public:
	Node *left,*right;
	int data;
	bool rthread;
	Node (int data){
		this->data=data;
		rthread=false;
		this->left=nullptr;
		this->right=nullptr;
	}
	
};
Node* leftmost(Node *node){
		if(node==nullptr){
			return nullptr;
		}
		else{
			while(node->left!=nullptr){
				node=node->left;
			}
			return node;
		}
}
class bsttotbt{
public:
	bsttotbt(){

	}
	void convert(Node *root){
		inorder(root,nullptr);
	}
	void inorder(Node *root,Node *prev){
		if(root==nullptr){
			return;
		}
		else{
			inorder(root->right,prev);
			if(root->right==nullptr && prev!=nullptr){
				root->right=prev;
				root->rthread=true;
			}
			inorder(root->left,root);
		}
	}
	void print(Node *root){
		Node *current=leftmost(root);
		while(current!=nullptr){
			cout<<current->data;
			if(current->rthread)
				current=current->right;
			else
				current=leftmost(current->right);
		}
		cout<<endl;
	}
};

int main(){
	Node *root=new Node(10);
	root->left=new Node(5);
	root->right=new Node(15);
	root->left->left=new Node(1);
	root->left->right=new Node(7);
	root->right->left=new Node(12);
	root->right->right=new Node(20);
	bsttotbt *converter=new bsttotbt();
	converter->convert(root);
	cout<<"Inorder traversal: "<<endl;
	converter->print(root);
	return 0;
}

